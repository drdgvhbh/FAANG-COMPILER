use crate::ast::{Keyword, Expression};
use snailquote::unescape;
use lalrpop_util::{ParseError};
use std::fmt::Debug;

grammar<'err>(errors: &'err mut Vec<ParseError<usize, Token<'input>, &'static str>>);

pub Expression: Expression = {
    <id:r"[_a-zA-Z][a-zA-Z0-9_]+"> "(" <expr_list:ExpressionList> ")" => {
        return Expression::Invocation(id.into(), expr_list);
    },
    <s:StringLiteral> => Expression::StringLiteral(s)
}

ExpressionList: Vec<Expression> = {
    <expr:Expression> "," <expr_list:ExpressionList> => {
        let mut list = vec![expr];
        list.extend(expr_list);
        list
    },
    <expr:Expression?> => {
        if expr.is_none() {
            return vec![];
        }
        vec![expr.unwrap()]
    },
}

pub Keyword: Keyword = {
    "func" => Keyword::Func,
}

pub StringLiteral: String = {
    <s:r#""([^"\r\n\\]|\\.)*""#> => unescape(s).unwrap().into(),
}
